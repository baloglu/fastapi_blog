from typing import List, Optional
from pydantic import BaseModel

class UserBase(BaseModel):
    username: str
    email: str

class UserCreate(UserBase):
    password: str

class User(UserBase):
    id: int
    is_active: bool
    blogs: List["Blog"] = []

    class Config:
        orm_mode = True

class BlogBase(BaseModel):
    title: str
    content: str

class BlogCreate(BlogBase):
    pass

class Blog(BlogBase):
    id: int
    owner_id: int
    researches: List["Research"] = []

    class Config:
        orm_mode = True

class ResearchBase(BaseModel):
    topic: str
    summary: str
    url: Optional[str] = None

class ResearchCreate(ResearchBase):
    pass

class Research(ResearchBase):
    id: int
    blog_id: int

    class Config:
        orm_mode = True

'''
Some explanations:

The UserBase class defines the common attributes for a user, such as username and email.
The UserCreate class inherits from UserBase and adds the password attribute, which is required for creating a new user.
The User class inherits from UserBase and adds the id and is_active attributes, which are generated by the database. It also has a blogs attribute, which is a list of blog objects that belong to this user. The orm_mode = True option tells Pydantic to read the data from the database models even if they are not dicts.
The BlogBase class defines the common attributes for a blog, such as title and content.
The BlogCreate class inherits from BlogBase and does not add any new attribute, but it is used to distinguish the input model for creating a new blog from the output model for returning a blog.
The Blog class inherits from BlogBase and adds the id and owner_id attributes, which are generated by the database. It also has a researches attribute, which is a list of research objects that belong to this blog. The orm_mode = True option tells Pydantic to read the data from the database models even if they are not dicts.
The ResearchBase class defines the common attributes for a research, such as topic, summary and url.
The ResearchCreate class inherits from ResearchBase and does not add any new attribute, but it is used to distinguish the input model for creating a new research from the output model for returning a research.
The Research class inherits from ResearchBase and adds the id and blog_id attributes, which are generated by the database. The orm_mode = True option tells Pydantic to read the data from the database models even if they are not dicts.
'''